void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec3 color = vec3(0.0, 0.0, 1.0);
    vec2 point = vec2(iResolution.x/2.0, iResolution.y/2.0);
    float thickness = 1.0;
    float radius = 60.0;
    float brightness = 0.0;
	
    float dist = length(point - fragCoord);
    dist = dist-radius;
    dist *=1.0+0.9*sin(iGlobalTime);
    if(dist > 0.0) {
        brightness = 0.0;
    } else {
        dist = abs(dist);
        brightness = (radius-dist)/radius;
    }
	fragColor = vec4(color*brightness,1.0);
}




float saturate(float x)
{
    return clamp(x, 0.0, 1.0);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Set the center point and thickness in pixels of the pulse effect
    vec2 center = vec2(0.5, 0.5) * iResolution.xy;
    float thickness = 100.0;
    
    // Calculate distance from effect center, in pixels
    vec2 vecFromCenter = fragCoord - center;
    float radius = sqrt(dot(vecFromCenter, vecFromCenter));

    // Calculate current size of the pulse
    float time = fract(iGlobalTime / 3.0);
    float outerRadius = 400.0 * time;
    float innerRadius = outerRadius - thickness;

    // Calculate a function that will be 1.0 inside the pulse, 0.0 outside,
    // with a 1px-wide falloff to antialias the edges
    float pulse = saturate(radius - innerRadius) * saturate(outerRadius - radius);

    // Lerp between the pulse color and background color based on this
    vec4 pulseColor = vec4(0.25, 1.0, 0.8, 1.0);
    vec4 backgroundColor = vec4(0.0, 0.0, 0.0, 1.0);
    pulse *= saturate(1.5-2.5*time); 
    fragColor = mix(backgroundColor, pulseColor, pulse);
    //fragColor *= max(0.0, 1.0-1.5*time); 

    // Approximate linear-to-sRGB conversion (improves antialiasing quality)
    //fragColor.rgb = sqrt(fragColor.rgb);
}






#define SIZE 2

float saturate(float x)
{
    return clamp(x, 0.0, 1.0);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Set the center point and thickness in pixels of the pulse effect
    vec3[] points = vec3[] (vec3(vec2(0.5, 0.5) * iResolution.xy, 1.0),
                            vec3(vec2(0.3, 0.5) * iResolution.xy, 2.0));
    
    float thickness = 100.0;
    
    for(int i = 0; i < SIZE; ++i) {
        // Calculate distance from effect center, in pixels
        vec2 vecFromCenter = fragCoord - points[i].xy;
        float radius = sqrt(dot(vecFromCenter, vecFromCenter));

        // Calculate current size of the pulse
        float time = fract(iGlobalTime / 3.0);
        float outerRadius = 200.0 * time;
        float innerRadius = outerRadius - thickness;

        // Calculate a function that will be 1.0 inside the pulse, 0.0 outside,
        // with a 1px-wide falloff to antialias the edges
        float pulse = saturate(radius - innerRadius) * saturate(outerRadius - radius);

        // Lerp between the pulse color and background color based on this
        vec4 pulseColor = points[i].z == 1.0 ? vec4(0.25, 1.0, 0.8, 1.0) : vec4(0.8, 1.0, 0.25, 1.0);
        vec4 backgroundColor = vec4(0.0, 0.0, 0.0, 1.0);
        pulse *= saturate(1.5-2.5*time); 
        vec4 color = mix(backgroundColor, pulseColor, pulse);
        fragColor = max(fragColor, color);
    }
    //fragColor *= max(0.0, 1.0-1.5*time); 

    // Approximate linear-to-sRGB conversion (improves antialiasing quality)
    //fragColor.rgb = sqrt(fragColor.rgb);
}





//Sci-fi radar based on the work of gmunk for Oblivion
//http://work.gmunk.com/OBLIVION-GFX

#define blue1 vec3(0.74,0.95,1.00)
#define blue2 vec3(0.87,0.98,1.00)
#define blue3 vec3(0.35,0.76,0.83)
#define blue4 vec3(0.953,0.969,0.89)
#define red   vec3(1.00,0.38,0.227)

#define MOV(a,b,c,d,t) (vec2(a*cos(t)+b*cos(0.1*(t)), c*sin(t)+d*cos(0.1*(t))))

float bip2(vec2 uv, vec2 center)
{
    float r = length(uv - center);
    float R = 100.0*mod(iGlobalTime, 3.0);
    
    return smoothstep(max(0.0, R - 20.0), R, r) //inside
        - (1.0 - smoothstep(r - 1.0, r+1.0, R)); //outside
}
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec3 finalColor;
	vec2 uv = fragCoord.xy;
    //center of the image
    vec2 c = iResolution.xy/2.0;
    //animate some bips with random movements
    finalColor = bip2(uv,c) * red * clamp(1.5-1.5*mod(iGlobalTime, 3.0), 0.0, 1.0);


    fragColor = vec4( finalColor, 1.0 );
}






#version 400 core

#define MAX_TANKS 50

in vec4 gl_FragCoord;
out vec4 outColor;

uniform vec2 resolution;
uniform float globalTime;
uniform vec2 points[MAX_TANKS];

float saturate(float x) {
    return clamp(x, 0.0, 1.0);
}

void main() {
    // Set the center point and thickness in pixels of the pulse effect
    float thickness = 1.0;

    for(int i = 0; i < MAX_TANKS; ++i) {
        if(points[i].x == 0) continue;
        // Calculate distance from effect center, in pixels
        vec2 vecFromCenter = gl_FragCoord.xy - points[i] - resolution * 0.5;
        float radius = sqrt(dot(vecFromCenter, vecFromCenter));

        // Calculate current size of the pulse
        float time = fract(globalTime / 6.0);
        float outerRadius = 600.0 * time;
        float innerRadius = outerRadius - thickness;

        // Calculate a function that will be 1.0 inside the pulse, 0.0 outside,
        // with a 1px-wide falloff to antialias the edges
        float pulse = saturate(radius - innerRadius) * saturate(outerRadius - radius);

        // Lerp between the pulse color and background color based on this
        vec4 pulseColor = vec4(.7, .7, .7, 1.0);
        vec4 backgroundColor = vec4(0.0, 0.0, 0.0, 1.0);
        pulse *= saturate(1.5-4.5*time);
        vec4 color = mix(backgroundColor, pulseColor, pulse);
        outColor = max(outColor, color);
    }
    //outColor = vec4(1.0, 1.0, 1.0, 1.0);
    //fragColor *= max(0.0, 1.0-1.5*time);

    // Approximate linear-to-sRGB conversion (improves antialiasing quality)
    //fragColor.rgb = sqrt(fragColor.rgb);
}
